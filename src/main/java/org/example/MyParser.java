/* Generated By:JavaCC: Do not edit this line. MyParser.java */
class MyParser implements MyParserConstants {
  public static void main( String[] args ) throws ParseException, TokenMgrError {
    MyParser parser = new MyParser( System.in ) ;
    parser.Start() ;
    // javacc Lexer.jj
    // javac *.java
    // java MyParser < ex.txt
    //^[A-Za-z]+$
    }

  static final public void Start() throws ParseException {
 Token t;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
      case FLOAT:
      case STRING:
      case DEF:
      case BREAK:
      case PRINT:
      case READ:
      case RETURN:
      case NEW:
      case NULL:
      case IF:
      case ELSE:
      case FOR:
      case PLUS:
      case MINUS:
      case MULT:
      case DIV:
      case OPENP:
      case CLOSEP:
      case OPENCB:
      case CLOSECB:
      case OPENB:
      case CLOSEB:
      case SEMIC:
      case COMMA:
      case EQUALS:
      case ASSIGN:
      case GREAT:
      case LESS:
      case GREATEQ:
      case LESSEQ:
      case DIFF:
      case MOD:
      case ID:
      case STRING_CONST:
      case FLOAT_CONST:
      case INT_CONST:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DEF:
        jj_consume_token(DEF);
           System.out.println("Palavra reservada: def");
        break;
      case ID:
        t = jj_consume_token(ID);
             System.out.println("Palavra reservada (id): " + t.image);
        break;
      case OPENP:
        jj_consume_token(OPENP);
              System.out.println("Palavra reservada: (");
        break;
      case CLOSEP:
        jj_consume_token(CLOSEP);
               System.out.println("Palavra reservada: )");
        break;
      case OPENCB:
        jj_consume_token(OPENCB);
               System.out.println("Palavra reservada: {");
        break;
      case CLOSECB:
        jj_consume_token(CLOSECB);
                System.out.println("Palavra reservada: }");
        break;
      case INT:
        jj_consume_token(INT);
            System.out.println("Palavra reservada: int");
        break;
      case FLOAT:
        jj_consume_token(FLOAT);
              System.out.println("Palavra reservada: float");
        break;
      case STRING:
        jj_consume_token(STRING);
               System.out.println("Palavra reservada: string");
        break;
      case BREAK:
        jj_consume_token(BREAK);
              System.out.println("Palavra reservada: break");
        break;
      case PRINT:
        jj_consume_token(PRINT);
              System.out.println("Palavra reservada: print");
        break;
      case READ:
        jj_consume_token(READ);
             System.out.println("Palavra reservada: read");
        break;
      case RETURN:
        jj_consume_token(RETURN);
               System.out.println("Palavra reservada: return");
        break;
      case NEW:
        jj_consume_token(NEW);
            System.out.println("Palavra reservada: new");
        break;
      case NULL:
        jj_consume_token(NULL);
             System.out.println("Palavra reservada: null");
        break;
      case IF:
        jj_consume_token(IF);
           System.out.println("Palavra reservada: if");
        break;
      case ELSE:
        jj_consume_token(ELSE);
             System.out.println("Palavra reservada: else");
        break;
      case FOR:
        jj_consume_token(FOR);
            System.out.println("Palavra reservada: for");
        break;
      case PLUS:
        jj_consume_token(PLUS);
             System.out.println("Palavra reservada: plus");
        break;
      case MINUS:
        jj_consume_token(MINUS);
              System.out.println("Palavra reservada: minus");
        break;
      case MULT:
        jj_consume_token(MULT);
             System.out.println("Palavra reservada: mult");
        break;
      case DIV:
        jj_consume_token(DIV);
            System.out.println("Palavra reservada: div");
        break;
      case OPENB:
        jj_consume_token(OPENB);
              System.out.println("Palavra reservada: (");
        break;
      case CLOSEB:
        jj_consume_token(CLOSEB);
               System.out.println("Palavra reservada: )");
        break;
      case COMMA:
        jj_consume_token(COMMA);
              System.out.println("Palavra reservada: ,");
        break;
      case SEMIC:
        jj_consume_token(SEMIC);
              System.out.println("Palavra reservada: ;");
        break;
      case EQUALS:
        jj_consume_token(EQUALS);
               System.out.println("Palavra reservada: ==");
        break;
      case ASSIGN:
        jj_consume_token(ASSIGN);
               System.out.println("Palavra reservada: =");
        break;
      case GREAT:
        jj_consume_token(GREAT);
              System.out.println("Palavra reservada: >");
        break;
      case LESS:
        jj_consume_token(LESS);
             System.out.println("Palavra reservada: <");
        break;
      case GREATEQ:
        jj_consume_token(GREATEQ);
                System.out.println("Palavra reservada: >");
        break;
      case LESSEQ:
        jj_consume_token(LESSEQ);
               System.out.println("Palavra reservada: <");
        break;
      case DIFF:
        jj_consume_token(DIFF);
             System.out.println("Palavra reservada: !=");
        break;
      case MOD:
        jj_consume_token(MOD);
            System.out.println("Palavra reservada: %");
        break;
      case INT_CONST:
        t = jj_consume_token(INT_CONST);
                    System.out.println("Palavra reservada (int):" + t.image);
        break;
      case FLOAT_CONST:
        t = jj_consume_token(FLOAT_CONST);
                      System.out.println("Palavra reservada (float): " + t.image);
        break;
      case STRING_CONST:
        t = jj_consume_token(STRING_CONST);
                       System.out.println("Palavra reservada (string): " + t.image);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(0);
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public MyParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[2];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xffffffe0,0xffffffe0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x3ff,0x3ff,};
   }

  /** Constructor with InputStream. */
  public MyParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MyParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MyParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public MyParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MyParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public MyParser(MyParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(MyParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List jj_expentries = new java.util.ArrayList();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[42];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 2; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 42; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
