/* Generated By:JavaCC: Do not edit this line. MyParser.java */
import java.util.ArrayList;import java.util.HashMap;
import java.util.Map;



class MyParser implements MyParserConstants {
    private static Map<String, ArrayList<String>> symbolTable;
    private static ArrayList<String> tokenList;
    private static StringBuilder sententialForm = new StringBuilder();

  public static void main( String[] args ) throws ParseException, TokenMgrError {
        boolean debug = false;
        boolean hasLexicalError = false;
        boolean hasSyntaxError = false;
        MyParser parser = new MyParser( System.in ) ;
        symbolTable = new HashMap<String, ArrayList<String>>();
        tokenList = new ArrayList<String>();

        if (!debug) parser.disable_tracing();

        boolean emptyInput = false;
        try {
            parser.program();
        } catch (ParseException e) {
            hasSyntaxError = true;
            if (parser.token == null) {
                emptyInput = true;
            } else {
                System.out.println("\nErro de an\u00e1lise sint\u00e1tica: " + e.getMessage());
                System.out.println("Falha na linha: " + e.currentToken.beginLine + ", coluna: " + e.currentToken.beginColumn);
                System.out.println("Forma sentencial alfa: " + sententialForm.toString());
                System.out.println("S\u00edmbolo n\u00e3o-terminal mais \u00e0 esquerda de alfa: " + e.currentToken.next.image);
                System.out.println("Token da entrada que causou o erro: " + e.currentToken.image + "\n");
            }
        } catch (TokenMgrError e) {
            hasLexicalError = true;
            System.out.println("\nErro de an\u00e1lise l\u00e9xica: " + e.getMessage());
        }

        if (emptyInput) {
            System.out.println("Erro de an\u00e1lise sint\u00e1tica: entrada vazia na tabela de reconhecimento");
        }

        if (!hasLexicalError) {
            System.out.println("\n>> Successo! Sem erros l\u00e9xicos.");
            System.out.println("Lista de tokens:");
            System.out.println("\n" + tokenList);

            System.out.println("\nTabela de s\u00edmbolos:");
            for (ArrayList<String> list : symbolTable.values()) {
                System.out.println("S\u00edmbolo: '" + list.get(0) + "', " + list.get(1) + " ocorr\u00eancias");
            }
        }

        if (!hasSyntaxError) {
            System.out.println("\n>> Successo! Sem erros sint\u00e1ticos.");
        }
    }

    private static void addTokenToList(String tokenName) {
        if (!tokenList.contains(tokenName)) {
            tokenList.add(tokenName);
        }
    }

    private static void addToSententialForm(String symbol) {
        sententialForm.append(symbol).append(" ");
    }

  final public void idToken(String type) throws ParseException {
    trace_call("idToken");
    try {
 Token t;
      t = jj_consume_token(ID);
    tokenList.add("ID");
    if (symbolTable.containsKey(t.image)) {
        Integer symbolCount = Integer.valueOf(symbolTable.get(t.image).get(1));
        symbolCount++;
        symbolTable.get(t.image).set(1, symbolCount.toString());
    } else {
        ArrayList<String> data = new ArrayList<String>();
        data.add(t.image);
//        data.add(type);
        data.add("1");
        symbolTable.put(t.image, data);
    }
    } finally {
      trace_return("idToken");
    }
  }

  final public void program() throws ParseException {
    trace_call("program");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DEF:
     addToSententialForm("program");
        funclist();
        break;
      case INT:
      case FLOAT:
      case STRING:
      case BREAK:
      case PRINT:
      case READ:
      case RETURN:
      case IF:
      case FOR:
      case OPENCB:
      case SEMIC:
      case ID:
        statement();
        break;
      case 0:

        jj_consume_token(0);
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("program");
    }
  }

  final public void funclist() throws ParseException {
    trace_call("funclist");
    try {
     addToSententialForm("funclist");
      funcdef();
      funclist2();
    } finally {
      trace_return("funclist");
    }
  }

  final public void funclist2() throws ParseException {
    trace_call("funclist2");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DEF:
     addToSententialForm("funclist2");
        funclist();
        break;
      default:
        jj_la1[1] = jj_gen;

      }
    } finally {
      trace_return("funclist2");
    }
  }

  final public void funcdef() throws ParseException {
    trace_call("funcdef");
    try {
     addToSententialForm("funcdef");
      defToken();
      idToken("function");
      jj_consume_token(OPENP);
      paramlist();
      jj_consume_token(CLOSEP);
      jj_consume_token(OPENCB);
      statelist();
      jj_consume_token(CLOSECB);
    } finally {
      trace_return("funcdef");
    }
  }

  final public void paramlist() throws ParseException {
    trace_call("paramlist");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
      case FLOAT:
      case STRING:
     addToSententialForm("paramlist");
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INT:
          intToken();
          break;
        case FLOAT:
          floatToken();
          break;
        case STRING:
          stringToken();
          break;
        default:
          jj_la1[2] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        idToken("parameter");
        commaToken();
        paramlist2();
        break;
      default:
        jj_la1[3] = jj_gen;

      }
    } finally {
      trace_return("paramlist");
    }
  }

  final public void paramlist2() throws ParseException {
    trace_call("paramlist2");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
     addToSententialForm("paramlist2");
        commaToken();
        paramlist();
        break;
      default:
        jj_la1[4] = jj_gen;

      }
    } finally {
      trace_return("paramlist2");
    }
  }

  final public void statement() throws ParseException {
    trace_call("statement");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
      case FLOAT:
      case STRING:
     addToSententialForm("statement");
        vardecl();
        semicToken();
        break;
      case ID:
        atribstat();
        semicToken();
        break;
      case PRINT:
        printstat();
        semicToken();
        break;
      case READ:
        readstat();
        semicToken();
        break;
      case RETURN:
        returnstat();
        semicToken();
        break;
      case IF:
        ifstat();
        break;
      case FOR:
        forstat();
        break;
      case OPENCB:
        opencbToken();
        statelist();
        closecbToken();
        break;
      case BREAK:
        breakToken();
        semicToken();
        break;
      case SEMIC:
        semicToken();
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("statement");
    }
  }

  final public void vardecl() throws ParseException {
    trace_call("vardecl");
    try {
     addToSententialForm("vardecl");
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
        intToken();
        break;
      case FLOAT:
        floatToken();
        break;
      case STRING:
        stringToken();
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      idToken("variable");
      ic();
    } finally {
      trace_return("vardecl");
    }
  }

  final public void ic() throws ParseException {
    trace_call("ic");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPENB:
     addToSententialForm("ic");
        openbToken();
        intConstToken();
        closebToken();
        ic();
        break;
      default:
        jj_la1[7] = jj_gen;

      }
    } finally {
      trace_return("ic");
    }
  }

  final public void atribstat() throws ParseException {
    trace_call("atribstat");
    try {
     addToSententialForm("atribstat");
      lvalue();
      assignToken();
      if (jj_2_1(2)) {
        expression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NEW:
          allocexpression();
          break;
        case ID:
          funccal();
          break;
        default:
          jj_la1[8] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("atribstat");
    }
  }

  final public void funccal() throws ParseException {
    trace_call("funccal");
    try {
     addToSententialForm("funccal");
      idToken("function");
      openpToken();
      paramlistcall();
      closepToken();
    } finally {
      trace_return("funccal");
    }
  }

  final public void paramlistcall() throws ParseException {
    trace_call("paramlistcall");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
     addToSententialForm("paramlistcall");
        idToken("parameter");
        paramlistcall2();
        break;
      default:
        jj_la1[9] = jj_gen;

      }
    } finally {
      trace_return("paramlistcall");
    }
  }

  final public void paramlistcall2() throws ParseException {
    trace_call("paramlistcall2");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
     addToSententialForm("paramlistcall2");
        commaToken();
        paramlistcall();
        break;
      default:
        jj_la1[10] = jj_gen;

      }
    } finally {
      trace_return("paramlistcall2");
    }
  }

  final public void printstat() throws ParseException {
    trace_call("printstat");
    try {
     addToSententialForm("printstat");
      printToken();
      expression();
    } finally {
      trace_return("printstat");
    }
  }

  final public void readstat() throws ParseException {
    trace_call("readstat");
    try {
     addToSententialForm("readstat");
      readToken();
      lvalue();
    } finally {
      trace_return("readstat");
    }
  }

  final public void returnstat() throws ParseException {
    trace_call("returnstat");
    try {
     addToSententialForm("returnstat");
      returnToken();
    } finally {
      trace_return("returnstat");
    }
  }

  final public void ifstat() throws ParseException {
    trace_call("ifstat");
    try {
     addToSententialForm("ifstat");
      ifToken();
      openpToken();
      expression();
      closepToken();
      statement();
      es();
    } finally {
      trace_return("ifstat");
    }
  }

  final public void es() throws ParseException {
    trace_call("es");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE:
     addToSententialForm("es");
        elseToken();
        statement();
        break;
      default:
        jj_la1[11] = jj_gen;

      }
    } finally {
      trace_return("es");
    }
  }

  final public void forstat() throws ParseException {
    trace_call("forstat");
    try {
     addToSententialForm("forstat");
      forToken();
      openpToken();
      atribstat();
      semicToken();
      expression();
      semicToken();
      atribstat();
      closepToken();
      statement();
    } finally {
      trace_return("forstat");
    }
  }

  final public void statelist() throws ParseException {
    trace_call("statelist");
    try {
     addToSententialForm("statelist");
      statement();
      sl();
    } finally {
      trace_return("statelist");
    }
  }

  final public void sl() throws ParseException {
    trace_call("sl");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
      case FLOAT:
      case STRING:
      case BREAK:
      case PRINT:
      case READ:
      case RETURN:
      case IF:
      case FOR:
      case OPENCB:
      case SEMIC:
      case ID:
     addToSententialForm("sl");
        statelist();
        break;
      default:
        jj_la1[12] = jj_gen;

      }
    } finally {
      trace_return("sl");
    }
  }

  final public void allocexpression() throws ParseException {
    trace_call("allocexpression");
    try {
     addToSententialForm("allocexpression");
      newToken();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
        intToken();
        break;
      case FLOAT:
        floatToken();
        break;
      case STRING:
        stringToken();
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      ne();
    } finally {
      trace_return("allocexpression");
    }
  }

  final public void ne() throws ParseException {
    trace_call("ne");
    try {
     addToSententialForm("ne");
      openbToken();
      numexpression();
      closebToken();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPENB:
        ne();
        break;
      default:
        jj_la1[14] = jj_gen;

      }
    } finally {
      trace_return("ne");
    }
  }

  final public void expression() throws ParseException {
    trace_call("expression");
    try {
     addToSententialForm("numexpression");
      numexpression();
      ned();
    } finally {
      trace_return("expression");
    }
  }

  final public void ned() throws ParseException {
    trace_call("ned");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUALS:
      case GREAT:
      case LESS:
      case GREATEQ:
      case LESSEQ:
      case DIFF:
     addToSententialForm("ned");
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LESS:
          lessToken();
          break;
        case GREAT:
          greatToken();
          break;
        case LESSEQ:
          lesseqToken();
          break;
        case GREATEQ:
          greateqToken();
          break;
        case EQUALS:
          equalsToken();
          break;
        case DIFF:
          diffToken();
          break;
        default:
          jj_la1[15] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        numexpression();
        break;
      default:
        jj_la1[16] = jj_gen;

      }
    } finally {
      trace_return("ned");
    }
  }

  final public void numexpression() throws ParseException {
    trace_call("numexpression");
    try {
     addToSententialForm("numexpression");
      term();
      ner();
    } finally {
      trace_return("numexpression");
    }
  }

  final public void ner() throws ParseException {
    trace_call("ner");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
     addToSententialForm("ner");
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          plusToken();
          break;
        case MINUS:
          minusToken();
          break;
        default:
          jj_la1[17] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        term();
        ner();
        break;
      default:
        jj_la1[18] = jj_gen;

      }
    } finally {
      trace_return("ner");
    }
  }

  final public void term() throws ParseException {
    trace_call("term");
    try {
     addToSententialForm("term");
      unaryexpr();
      ue();
    } finally {
      trace_return("term");
    }
  }

  final public void ue() throws ParseException {
    trace_call("ue");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULT:
      case DIV:
      case MOD:
     addToSententialForm("ue");
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MULT:
          multToken();
          break;
        case DIV:
          divToken();
          break;
        case MOD:
          modToken();
          break;
        default:
          jj_la1[19] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        unaryexpr();
        ue();
        break;
      default:
        jj_la1[20] = jj_gen;

      }
    } finally {
      trace_return("ue");
    }
  }

  final public void unaryexpr() throws ParseException {
    trace_call("unaryexpr");
    try {
     addToSententialForm("unaryexpr");
      mn();
      factor();
    } finally {
      trace_return("unaryexpr");
    }
  }

  final public void mn() throws ParseException {
    trace_call("mn");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
     addToSententialForm("mn");
        plusToken();
        break;
      case MINUS:
        minusToken();
        break;
      default:
        jj_la1[21] = jj_gen;

      }
    } finally {
      trace_return("mn");
    }
  }

  final public void factor() throws ParseException {
    trace_call("factor");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT_CONST:
     addToSententialForm("factor");
        intConstToken();
        break;
      case FLOAT_CONST:
        floatConstToken();
        break;
      case STRING_CONST:
        stringConstToken();
        break;
      case NULL:
        nullToken();
        break;
      case ID:
        lvalue();
        break;
      case OPENP:
        openpToken();
        numexpression();
        closepToken();
        break;
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("factor");
    }
  }

  final public void lvalue() throws ParseException {
    trace_call("lvalue");
    try {
     addToSententialForm("lvalue");
      idToken("lvalue");
      net();
    } finally {
      trace_return("lvalue");
    }
  }

  final public void net() throws ParseException {
    trace_call("net");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPENB:
     addToSententialForm("net");
        openbToken();
        numexpression();
        closebToken();
        net();
        break;
      default:
        jj_la1[23] = jj_gen;

      }
    } finally {
      trace_return("net");
    }
  }

  final public void intToken() throws ParseException {
    trace_call("intToken");
    try {
      jj_consume_token(INT);
           tokenList.add("INT");
    } finally {
      trace_return("intToken");
    }
  }

  final public void floatToken() throws ParseException {
    trace_call("floatToken");
    try {
      jj_consume_token(FLOAT);
             tokenList.add("FLOAT");
    } finally {
      trace_return("floatToken");
    }
  }

  final public void stringToken() throws ParseException {
    trace_call("stringToken");
    try {
      jj_consume_token(STRING);
              tokenList.add("STRING");
    } finally {
      trace_return("stringToken");
    }
  }

  final public void defToken() throws ParseException {
    trace_call("defToken");
    try {
      jj_consume_token(DEF);
           tokenList.add("DEF");
    } finally {
      trace_return("defToken");
    }
  }

  final public void breakToken() throws ParseException {
    trace_call("breakToken");
    try {
      jj_consume_token(BREAK);
             tokenList.add("BREAK");
    } finally {
      trace_return("breakToken");
    }
  }

  final public void printToken() throws ParseException {
    trace_call("printToken");
    try {
      jj_consume_token(PRINT);
             tokenList.add("PRINT");
    } finally {
      trace_return("printToken");
    }
  }

  final public void readToken() throws ParseException {
    trace_call("readToken");
    try {
      jj_consume_token(READ);
            tokenList.add("READ");
    } finally {
      trace_return("readToken");
    }
  }

  final public void returnToken() throws ParseException {
    trace_call("returnToken");
    try {
      jj_consume_token(RETURN);
              tokenList.add("RETURN");
    } finally {
      trace_return("returnToken");
    }
  }

  final public void newToken() throws ParseException {
    trace_call("newToken");
    try {
      jj_consume_token(NEW);
           tokenList.add("NEW");
    } finally {
      trace_return("newToken");
    }
  }

  final public void nullToken() throws ParseException {
    trace_call("nullToken");
    try {
      jj_consume_token(NULL);
            tokenList.add("NULL");
    } finally {
      trace_return("nullToken");
    }
  }

  final public void ifToken() throws ParseException {
    trace_call("ifToken");
    try {
      jj_consume_token(IF);
          tokenList.add("IF");
    } finally {
      trace_return("ifToken");
    }
  }

  final public void elseToken() throws ParseException {
    trace_call("elseToken");
    try {
      jj_consume_token(ELSE);
            tokenList.add("ELSE");
    } finally {
      trace_return("elseToken");
    }
  }

  final public void forToken() throws ParseException {
    trace_call("forToken");
    try {
      jj_consume_token(FOR);
           tokenList.add("FOR");
    } finally {
      trace_return("forToken");
    }
  }

  final public void plusToken() throws ParseException {
    trace_call("plusToken");
    try {
      jj_consume_token(PLUS);
            tokenList.add("PLUS");
    } finally {
      trace_return("plusToken");
    }
  }

  final public void minusToken() throws ParseException {
    trace_call("minusToken");
    try {
      jj_consume_token(MINUS);
             tokenList.add("MINUS");
    } finally {
      trace_return("minusToken");
    }
  }

  final public void multToken() throws ParseException {
    trace_call("multToken");
    try {
      jj_consume_token(MULT);
            tokenList.add("MULT");
    } finally {
      trace_return("multToken");
    }
  }

  final public void divToken() throws ParseException {
    trace_call("divToken");
    try {
      jj_consume_token(DIV);
           tokenList.add("DIV");
    } finally {
      trace_return("divToken");
    }
  }

  final public void openpToken() throws ParseException {
    trace_call("openpToken");
    try {
      jj_consume_token(OPENP);
             tokenList.add("OPENP");
    } finally {
      trace_return("openpToken");
    }
  }

  final public void closepToken() throws ParseException {
    trace_call("closepToken");
    try {
      jj_consume_token(CLOSEP);
              tokenList.add("CLOSEP");
    } finally {
      trace_return("closepToken");
    }
  }

  final public void openbToken() throws ParseException {
    trace_call("openbToken");
    try {
      jj_consume_token(OPENB);
             tokenList.add("OPENB");
    } finally {
      trace_return("openbToken");
    }
  }

  final public void closebToken() throws ParseException {
    trace_call("closebToken");
    try {
      jj_consume_token(CLOSEB);
              tokenList.add("CLOSEB");
    } finally {
      trace_return("closebToken");
    }
  }

  final public void opencbToken() throws ParseException {
    trace_call("opencbToken");
    try {
      jj_consume_token(OPENCB);
              tokenList.add("OPENCB");
    } finally {
      trace_return("opencbToken");
    }
  }

  final public void closecbToken() throws ParseException {
    trace_call("closecbToken");
    try {
      jj_consume_token(CLOSECB);
               tokenList.add("CLOSECB");
    } finally {
      trace_return("closecbToken");
    }
  }

  final public void semicToken() throws ParseException {
    trace_call("semicToken");
    try {
      jj_consume_token(SEMIC);
             tokenList.add("SEMIC");
    } finally {
      trace_return("semicToken");
    }
  }

  final public void commaToken() throws ParseException {
    trace_call("commaToken");
    try {
      jj_consume_token(COMMA);
             tokenList.add("COMMA");
    } finally {
      trace_return("commaToken");
    }
  }

  final public void equalsToken() throws ParseException {
    trace_call("equalsToken");
    try {
      jj_consume_token(EQUALS);
              tokenList.add("EQUALS");
    } finally {
      trace_return("equalsToken");
    }
  }

  final public void assignToken() throws ParseException {
    trace_call("assignToken");
    try {
      jj_consume_token(ASSIGN);
              tokenList.add("ASSIGN");
    } finally {
      trace_return("assignToken");
    }
  }

  final public void greatToken() throws ParseException {
    trace_call("greatToken");
    try {
      jj_consume_token(GREAT);
             tokenList.add("GREAT");
    } finally {
      trace_return("greatToken");
    }
  }

  final public void greateqToken() throws ParseException {
    trace_call("greateqToken");
    try {
      jj_consume_token(GREATEQ);
               tokenList.add("GREATEQ");
    } finally {
      trace_return("greateqToken");
    }
  }

  final public void lessToken() throws ParseException {
    trace_call("lessToken");
    try {
      jj_consume_token(LESS);
            tokenList.add("LESS");
    } finally {
      trace_return("lessToken");
    }
  }

  final public void lesseqToken() throws ParseException {
    trace_call("lesseqToken");
    try {
      jj_consume_token(LESSEQ);
              tokenList.add("LESSEQ");
    } finally {
      trace_return("lesseqToken");
    }
  }

  final public void diffToken() throws ParseException {
    trace_call("diffToken");
    try {
      jj_consume_token(DIFF);
            tokenList.add("DIFF");
    } finally {
      trace_return("diffToken");
    }
  }

  final public void modToken() throws ParseException {
    trace_call("modToken");
    try {
      jj_consume_token(MOD);
           tokenList.add("MOD");
    } finally {
      trace_return("modToken");
    }
  }

  final public void intConstToken() throws ParseException {
    trace_call("intConstToken");
    try {
      jj_consume_token(INT_CONST);
                  tokenList.add("INT_CONST");
    } finally {
      trace_return("intConstToken");
    }
  }

  final public void floatConstToken() throws ParseException {
    trace_call("floatConstToken");
    try {
      jj_consume_token(FLOAT_CONST);
                    tokenList.add("FLOAT_CONST");
    } finally {
      trace_return("floatConstToken");
    }
  }

  final public void stringConstToken() throws ParseException {
    trace_call("stringConstToken");
    try {
      jj_consume_token(STRING_CONST);
                     tokenList.add("STRING_CONST");
    } finally {
      trace_return("stringConstToken");
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_3R_7() {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_5() {
    if (!jj_rescan) trace_call("mn(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_7()) {
    jj_scanpos = xsp;
    if (jj_3R_8()) {
    jj_scanpos = xsp;
    if (jj_3R_9()) { if (!jj_rescan) trace_return("mn(LOOKAHEAD FAILED)"); return true; }
    }
    }
    { if (!jj_rescan) trace_return("mn(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_16() {
    if (!jj_rescan) trace_call("plusToken(LOOKING AHEAD...)");
    if (jj_scan_token(PLUS)) { if (!jj_rescan) trace_return("plusToken(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("plusToken(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_12() {
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_1() {
    if (!jj_rescan) trace_call("expression(LOOKING AHEAD...)");
    if (jj_3R_2()) { if (!jj_rescan) trace_return("expression(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("expression(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_15() {
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_4() {
    if (!jj_rescan) trace_call("unaryexpr(LOOKING AHEAD...)");
    if (jj_3R_5()) { if (!jj_rescan) trace_return("unaryexpr(LOOKAHEAD FAILED)"); return true; }
    if (jj_3R_6()) { if (!jj_rescan) trace_return("unaryexpr(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("unaryexpr(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_14() {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_9() {
    return false;
  }

  private boolean jj_3R_21() {
    if (!jj_rescan) trace_call("nullToken(LOOKING AHEAD...)");
    if (jj_scan_token(NULL)) { if (!jj_rescan) trace_return("nullToken(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("nullToken(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_3() {
    if (!jj_rescan) trace_call("term(LOOKING AHEAD...)");
    if (jj_3R_4()) { if (!jj_rescan) trace_return("term(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("term(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_11() {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_23() {
    if (!jj_rescan) trace_call("openpToken(LOOKING AHEAD...)");
    if (jj_scan_token(OPENP)) { if (!jj_rescan) trace_return("openpToken(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("openpToken(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_20() {
    if (!jj_rescan) trace_call("stringConstToken(LOOKING AHEAD...)");
    if (jj_scan_token(STRING_CONST)) { if (!jj_rescan) trace_return("stringConstToken(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("stringConstToken(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_13() {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_1()) return true;
    return false;
  }

  private boolean jj_3R_8() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_22() {
    if (!jj_rescan) trace_call("lvalue(LOOKING AHEAD...)");
    if (jj_3R_24()) { if (!jj_rescan) trace_return("lvalue(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("lvalue(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_19() {
    if (!jj_rescan) trace_call("floatConstToken(LOOKING AHEAD...)");
    if (jj_scan_token(FLOAT_CONST)) { if (!jj_rescan) trace_return("floatConstToken(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("floatConstToken(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_2() {
    if (!jj_rescan) trace_call("numexpression(LOOKING AHEAD...)");
    if (jj_3R_3()) { if (!jj_rescan) trace_return("numexpression(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("numexpression(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_18() {
    if (!jj_rescan) trace_call("intConstToken(LOOKING AHEAD...)");
    if (jj_scan_token(INT_CONST)) { if (!jj_rescan) trace_return("intConstToken(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("intConstToken(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_24() {
    if (!jj_rescan) trace_call("idToken(LOOKING AHEAD...)");
    if (jj_scan_token(ID)) { if (!jj_rescan) trace_return("idToken(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("idToken(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_6() {
    if (!jj_rescan) trace_call("factor(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_10()) {
    jj_scanpos = xsp;
    if (jj_3R_11()) {
    jj_scanpos = xsp;
    if (jj_3R_12()) {
    jj_scanpos = xsp;
    if (jj_3R_13()) {
    jj_scanpos = xsp;
    if (jj_3R_14()) {
    jj_scanpos = xsp;
    if (jj_3R_15()) { if (!jj_rescan) trace_return("factor(LOOKAHEAD FAILED)"); return true; }
    }
    }
    }
    }
    }
    { if (!jj_rescan) trace_return("factor(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_10() {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_17() {
    if (!jj_rescan) trace_call("minusToken(LOOKING AHEAD...)");
    if (jj_scan_token(MINUS)) { if (!jj_rescan) trace_return("minusToken(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("minusToken(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  /** Generated Token Manager. */
  public MyParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  /** Whether we are looking ahead. */
  private boolean jj_lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[24];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x11029fe1,0x100,0xe0,0xe0,0x20000000,0x11029ee0,0xe0,0x4000000,0x2000,0x0,0x20000000,0x10000,0x11029ee0,0xe0,0x4000000,0x40000000,0x40000000,0xc0000,0xc0000,0x300000,0x300000,0xc0000,0x404000,0x4000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x100,0x0,0x0,0x0,0x0,0x100,0x0,0x0,0x100,0x100,0x0,0x0,0x100,0x0,0x0,0x1f,0x1f,0x0,0x0,0x20,0x20,0x0,0xf00,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[1];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public MyParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MyParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MyParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public MyParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MyParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public MyParser(MyParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(MyParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      trace_token(token, "");
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    } else {
      trace_scan(jj_scanpos, kind);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
      trace_token(token, " (in getNextToken)");
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = jj_lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List jj_expentries = new java.util.ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[44];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 24; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 44; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  private int trace_indent = 0;
  private boolean trace_enabled = true;

/** Enable tracing. */
  final public void enable_tracing() {
    trace_enabled = true;
  }

/** Disable tracing. */
  final public void disable_tracing() {
    trace_enabled = false;
  }

  private void trace_call(String s) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Call:   " + s);
    }
    trace_indent = trace_indent + 2;
  }

  private void trace_return(String s) {
    trace_indent = trace_indent - 2;
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Return: " + s);
    }
  }

  private void trace_token(Token t, String where) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Consumed token: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
        System.out.print(": \"" + t.image + "\"");
      }
      System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
    }
  }

  private void trace_scan(Token t1, int t2) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Visited token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
        System.out.print(": \"" + t1.image + "\"");
      }
      System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
    }
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
