PARSER_BEGIN(MyParser)
class MyParser {
  public static void main( String[] args ) throws ParseException, TokenMgrError {
    MyParser parser = new MyParser( System.in ) ;
    parser.Start() ;
    // javacc Lexer.jj
    // javac *.java
    // java MyParser < ex.txt
    //^[A-Za-z]+$
    }
}
PARSER_END(MyParser)

SKIP : { " " | "\n" | "\r" | "\r\n" }

TOKEN:
{
  < INT: "int" >
| < FLOAT: "float" >
| < STRING: "string" >
| < DEF: "def" >
| < BREAK: "break" >
| < PRINT: "print" >
| < READ: "read" >
| < RETURN: "return" >
| < NEW: "new" >
| < NULL: "null" >
| < IF: "if" >
| < ELSE: "else" >
| < FOR: "for" >
| < PLUS: "+" >
| < MINUS: "-" >
| < MULT: "*" >
| < DIV: "/" >
| < OPENP: "(">
| < CLOSEP: ")" >
| < OPENCB: "{" >
| < CLOSECB: "}" >
| < OPENB: "[" >
| < CLOSEB: "]" >
| < SEMIC: ";" >
| < COMMA: "," >
| < EQUALS: "==" >
| < ASSIGN: "=" >
| < GREAT: ">" >
| < LESS: "<" >
| < GREATEQ: ">=" >
| < LESSEQ: "<=" >
| < DIFF: "!=" >
| < MOD: "%" >
| < ID: ["a" - "z", "A" - "Z"] (["a" - "z", "A" - "Z", "0" - "9"])* >
| < STRING_CONST: "\"" (~["\"", "\n", "\r"])* "\"" >
| < FLOAT_CONST: (["0"-"9"])* "."(["0"-"9"])+ >
| < INT_CONST: (["0"-"9"])+ >
}

void Start() :
{Token t;}
{

  (
    <DEF> {System.out.println("Palavra reservada: def");}
  |  t=<ID> {System.out.println("Palavra reservada (id): " + t.image);}
  |  <OPENP> {System.out.println("Palavra reservada: (");}
  |  <CLOSEP> {System.out.println("Palavra reservada: )");}
  |  <OPENCB> {System.out.println("Palavra reservada: {");}
  |  <CLOSECB> {System.out.println("Palavra reservada: }");}
  |  <INT> {System.out.println("Palavra reservada: int");}
  |  <FLOAT> {System.out.println("Palavra reservada: float");}
  |  <STRING> {System.out.println("Palavra reservada: string");}
  |  <BREAK> {System.out.println("Palavra reservada: break");}
  |  <PRINT> {System.out.println("Palavra reservada: print");}
  |  <READ> {System.out.println("Palavra reservada: read");}
  |  <RETURN> {System.out.println("Palavra reservada: return");}
  |  <NEW> {System.out.println("Palavra reservada: new");}
  |  <NULL> {System.out.println("Palavra reservada: null");}
  |  <IF> {System.out.println("Palavra reservada: if");}
  |  <ELSE> {System.out.println("Palavra reservada: else");}
  |  <FOR> {System.out.println("Palavra reservada: for");}
  |  <PLUS> {System.out.println("Palavra reservada: plus");}
  |  <MINUS> {System.out.println("Palavra reservada: minus");}
  |  <MULT> {System.out.println("Palavra reservada: mult");}
  |  <DIV> {System.out.println("Palavra reservada: div");}
  |  <OPENB> {System.out.println("Palavra reservada: (");}
  |  <CLOSEB> {System.out.println("Palavra reservada: )");}
  |  <COMMA> {System.out.println("Palavra reservada: ,");}
  |  <SEMIC> {System.out.println("Palavra reservada: ;");}
  |  <EQUALS> {System.out.println("Palavra reservada: ==");}
  |  <ASSIGN> {System.out.println("Palavra reservada: =");}
  |  <GREAT> {System.out.println("Palavra reservada: >");}
  |  <LESS> {System.out.println("Palavra reservada: <");}
  |  <GREATEQ> {System.out.println("Palavra reservada: >");}
  |  <LESSEQ> {System.out.println("Palavra reservada: <");}
  |  <DIFF> {System.out.println("Palavra reservada: !=");}
  |  <MOD> {System.out.println("Palavra reservada: %");}
  |  t=<INT_CONST> {System.out.println("Palavra reservada (int):" + t.image);}
  |  t=<FLOAT_CONST> {System.out.println("Palavra reservada (float): " + t.image);}
  |  t=<STRING_CONST> {System.out.println("Palavra reservada (string): " + t.image);}
  )*
  <EOF>
}